# Fragment for our image title - needs to match either a local image build or a dockerhub image repo
x-customizable-image: &customizable_image
  # As of now, pull policy means we have to build locally before we run our compose (use the build with an appropriately set $DE_SITE_VERSION)
  image: desiredeffect/erpnext-custom:$DE_SITE_VERSION
  pull_policy: never

# Fragment for dependency - basically everything needs the configurator to close outr\
x-depends-on-configurator: &depends_on_configurator
  depends_on:
    configurator:
      condition: service_completed_successfully

# Fragment for our default network
x-de-defaultnetworks: &networks
  networks:
    - erpnet

# Aggregator Fragment of our baseline settings for most core containers
x-backend-defaults: &backend_defaults
  <<: [*depends_on_configurator, *customizable_image, *networks]
  restart: on-failure
  volumes:
    - sites:/home/frappe/frappe-bench/sites
    - logs:/home/frappe/frappe-bench/logs
    #- assets:/home/frappe/frappe-bench/sites/assets

services:
  ## Core Services
  # configurator - ensures site has proper database & redis host/port settings
  configurator:
    <<: *backend_defaults
    restart: "no"
    entrypoint:
      - bash
      - -c
    # add redis_socketio for backward compatibility
    command:
      - >
        ls -1 apps > sites/apps.txt;
        bench set-config -g db_host $$DB_HOST;
        bench set-config -gp db_port $$DB_PORT;
        bench set-config -g redis_cache "redis://$$REDIS_CACHE";
        bench set-config -g redis_queue "redis://$$REDIS_QUEUE";
        bench set-config -g redis_socketio "redis://$$REDIS_QUEUE";
        bench set-config -gp socketio_port $$SOCKETIO_PORT;
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      REDIS_CACHE: ${REDIS_CACHE}
      REDIS_QUEUE: ${REDIS_QUEUE}
      SOCKETIO_PORT: 9000
    depends_on: {}

  # create-site - generates site with default app settings & setup (if none by name $SITE exists)
  create-site:
    <<: *backend_defaults
    restart: "no"
    entrypoint:
      - bash
      - -c
    command:
      - >
        wait-for-it -t 120 db:3306;
        wait-for-it -t 120 redis-cache:6379;
        wait-for-it -t 120 redis-queue:6379;
        wait-for-it -t 120 redis-socketio:6379;
        export start=`date +%s`;
        until [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".db_host // empty"` ]] && \
          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_cache // empty"` ]] && \
          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_queue // empty"` ]];
        do
          echo "Waiting for sites/common_site_config.json to be created";
          sleep 5;
          if (( `date +%s`-start > 120 )); then
            echo "could not find sites/common_site_config.json with required keys";
            exit 1
          fi
        done;
        echo "sites/common_site_config.json found";
        bench new-site $SITE \
          --no-mariadb-socket \
          --admin-password=admin \
          --db-root-password=admin \
          --install-app erpnext \
          --install-app hrms \
          --install-app de_macrs \
          --set-default;

  # backend - werkzeug server
  backend:
    <<: *backend_defaults

  #nginx server that serves JS/CSS assets & routes incoming requests - also adds traefik labels
  frontend:
    <<: *customizable_image
    restart: on-failure
    command:
      - nginx-entrypoint.sh
    environment:
      BACKEND: backend:8000
      SOCKETIO: websocket:9000
      FRAPPE_SITE_NAME_HEADER: ${FRAPPE_SITE_NAME_HEADER:-$$host}
      UPSTREAM_REAL_IP_ADDRESS: ${UPSTREAM_REAL_IP_ADDRESS:-127.0.0.1}
      UPSTREAM_REAL_IP_HEADER: ${UPSTREAM_REAL_IP_HEADER:-X-Forwarded-For}
      UPSTREAM_REAL_IP_RECURSIVE: ${UPSTREAM_REAL_IP_RECURSIVE:-off}
      PROXY_READ_TIMEOUT: ${PROXY_READ_TIMOUT:-120}
      CLIENT_MAX_BODY_SIZE: ${CLIENT_MAX_BODY_SIZE:-50m}
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
      #- assets:/home/frappe/frappe-bench/sites/assets
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=rproxy"
      - "traefik.http.middlewares.no-robots.headers.customresponseheaders.X-Robots-Tag=none"
      - "traefik.http.routers.erprouter.rule=Host(`${SITE}`)"
      - "traefik.http.routers.erprouter.middlewares=no-robots"
      - "traefik.http.routers.erprouter.tls=true"
      - "traefik.http.routers.erprouter.tls.certresolver=le"
      - "traefik.http.services.erpservice.loadbalancer.server.port=8080"
    depends_on:
      - backend
      - websocket
    networks:
      - erpnet
      - rproxy

  # Node server that runs Socket.IO
  websocket:
    <<: [*depends_on_configurator, *customizable_image, *networks]
    restart: on-failure
    command:
      - node
      - /home/frappe/frappe-bench/apps/frappe/socketio.js
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
      #- assets:/home/frappe/frappe-bench/sites/assets

  # Python server that run job queues using rq - gobbles short & default
  queue-short:
    <<: *backend_defaults
    command: bench worker --queue short,default

  # Python server that run job queues using rq - gobbles short, default & long
  queue-long:
    <<: *backend_defaults
    command: bench worker --queue long,default,short

  # Python server that runs tasks with schedule
  scheduler:
    <<: *backend_defaults
    command: bench schedule

  ## Non-Core Services
  # Runs a Mariadb server
  db:
    <<: *networks
    image: mariadb:10.6
    healthcheck:
      test: mysqladmin ping -h localhost --password=admin
      interval: 1s
      retries: 15
    restart: on-failure
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --skip-character-set-client-handshake
      - --skip-innodb-read-only-compressed # Temporary fix for MariaDB 10.6
    environment:
      MYSQL_ROOT_PASSWORD: admin
    volumes:
      - db-data:/var/lib/mysql

  # Runs a redis queue + socket io
  redis-queue:
    <<: *backend_defaults
    image: redis:6.2-alpine
    volumes:
      - redis-queue-data:/data

  # Runs a redis cache 
  redis-cache:
    <<: *backend_defaults
    image: redis:6.2-alpine
    volumes:
      - redis-cache-data:/data

volumes:
  sites:
  logs:
  #assets:
  db-data:
  redis-queue-data:
  redis-cache-data:

networks:
  rproxy:
    external: true
  erpnet:
